BEGIN
;

--対象となる配信データ
CREATE TEMP TABLE TRTM_OFFER_DELIVERY_TMP AS
SELECT
	OFFER_ID
	,CAMPAIGN_ID
	,MEMBER_ID
	,NULL AS EMAILID
	,CHANNEL
	,OFFER_DEVICE
	,OFFER_DELIVERY_DT
	,OPEN_DT
	,CLICK_DT
FROM
	TRTM_OFFER_DELIVERY
WHERE
	OFFER_DELIVERY_DT >= CURRENT_DATE::TIMESTAMP + INTERVAL '-7DAYS'
	AND OFFER_DELIVERY_DT < CURRENT_DATE::TIMESTAMP
	AND OFFER_STATUS_DELIVERY = '0'	--配信成功（1の場合は失敗）
	AND OFFER_DELIVERY_DT IS NOT NULL
	AND ARTICLE_ID IS NOT NULL	--配信成功
	AND (OPEN_DT IS NULL OR OPEN_DT <= OFFER_DELIVERY_DT::DATE + INTERVAL '7DAYS')--配信から7日以内の開封実績対象
	AND (CLICK_DT IS NULL OR CLICK_DT <= OFFER_DELIVERY_DT::DATE + INTERVAL '7DAYS')--配信から7日以内の流入実績対象

UNION ALL

SELECT
	NULL AS OFFER_ID
	,MPM_MAPPINGID AS CAMPAIGN_ID
	,MMMEMBERID AS MEMBER_ID
	,MMDD.EMAILID
	,1 AS CHANNEL--メールのみの配信実績が対象のため
	,CASE
		WHEN MMD.MOBILEFLAG = 0 THEN  2--PCの場合は3.0とあわせて2とする
		ELSE MMD.MOBILEFLAG
	END AS OFFER_DEVICE
	,MMD.DELIVERYDT AS OFFER_DELIVERY_DT
	,MMDD.OPENDT AS OPEN_DT
	,NULL AS CLICK_DT
FROM
	TUCMAILMAGDELIVERY AS MMD
	INNER JOIN TUCMAILMAGDELIVERYDETAIL AS MMDD ON MMD.ARTICLEID = MMDD.ARTICLEID
	INNER JOIN TUCMAILMAGCAMPAIGN CP ON MMD.MAILMAGCAMPAIGNID = CP.MAILMAGCAMPAIGNID
	INNER JOIN TAT_DB_MASTER_PARAMETER_MAPPING ON MMD.MAILMAGCAMPAIGNID::VARCHAR(50) = MPM_PARAMETER::VARCHAR(50)
	INNER JOIN TMEMBEREMAIL ON MMDD.EMAIL = MMEMAIL AND MMDEFAULT IS TRUE
WHERE
	DELIVERYDT >= CURRENT_DATE::TIMESTAMP + INTERVAL '-7DAYS'
	AND DELIVERYDT < CURRENT_DATE::TIMESTAMP
	AND CP.TYPENAME = 'PA_M'
;

--対象となる購買データ
CREATE TEMP TABLE BUYDATA AS
SELECT
	ORORDERDT
    ,DATE_PART('HOUR', ORORDERDT) AS HOUR_ORDER
	,ORMEMBERID
	,GDGOODSDETAILID
	,ROUND((ROUND(ODPRICE * CAVALUE, 0) * ODQUANTITY) / CAVALUE, 0) AS BUYPRICE
FROM
	TORDER
	INNER JOIN TORDERDETAIL ON ORORDERID = ODORDERID
	INNER JOIN TSHOPSHELF ON ODSHELFID = SSSHELFID
	INNER JOIN TGOODSDETAIL ON SSGOODSDETAILID = GDGOODSDETAILID
	INNER JOIN TGOODS ON GDGOODSID = GOGOODSID
	INNER JOIN TSHOP ON SSSHOPID = SHSHOPID
	CROSS JOIN TAT_KPIREPORT_CALCULATION
WHERE
	ORMALLID = 1
	AND ODCANCELFLAG = 0
	AND ODCANCELDT IS NULL
	AND SHSHOPID <> 802
	AND ORORDERDT >= CURRENT_DATE::TIMESTAMP + INTERVAL '-7DAYS'
	AND CAKEY = 'TAX'
	AND CAVALIDATEDDT::TIMESTAMP <= ORORDERDT
	AND ORORDERDT <= CAEXPIREDDT::TIMESTAMP
;

--対象となるお気に入り登録データ
CREATE TEMP TABLE FAVDATA AS
SELECT DISTINCT
	FLMEMBERID
	,FLGOODSDETAILID
	,FLREGISTDT
	,FLDELETEDT
FROM (
	SELECT
		FLMEMBERID
		,FLGOODSDETAILID
		,FLREGISTDT
		,FLDELETEDT
	FROM
		TFAVORITELIST
	WHERE
		FLREGISTDT >= CURRENT_DATE::TIMESTAMP + INTERVAL '-7DAYS'
		AND FLGOODSDETAILID IS NOT NULL

	UNION ALL

	SELECT
		FLDMEMBERID AS FLMEMBERID
		,FLDGOODSDETAILID AS FLGOODSDETAILID
		,FLDREGISTDT AS FLREGISTDT
		,FLDDELETEDT AS FLDELETEDT
	FROM
		TFAVORITELIST_DELETE
	WHERE
		FLDREGISTDT >= CURRENT_DATE::TIMESTAMP + INTERVAL '-7DAYS'
		AND FLDGOODSDETAILID IS NOT NULL
) AS FAVBASE
;

--配信/購入/お気に入り登録データ詳細
CREATE TEMP TABLE ITEMDATA AS
--メール配信データ
SELECT
	SRM_SENDDT AS ID_SENDDT
	,SRM_CAMPAIGNID AS ID_CAMPAIGNID
	,SRM_CHANNELID AS ID_CHANNELID
	,SRM_DEVICEID AS ID_DEVICEID
	,SRM_OPENDT AS ID_OPENDT
	,SRM_UNIQUEGOODSID AS ID_UNIQUEGOODSID
	,SRM_AREATYPEID AS ID_AREATYPEID
	,HOUR_ORDER AS ID_HOUR_ORDER
	--配信日以降同商品が再度配信および開封されていた場合は次の開封日より前
	--購入金額については複数回購入すればすべて対象とするためSUMをとる
	,CASE
		WHEN ORMEMBERID IS NOT NULL AND (ORORDERDT < SRM_LEADOPENDT OR SRM_LEADOPENDT IS NULL) THEN SRM_UNIQUEGOODSID
		ELSE NULL
	END AS ID_BUYGOODSDETAILID
	,CASE
		WHEN ORMEMBERID IS NOT NULL AND (ORORDERDT < SRM_LEADOPENDT OR SRM_LEADOPENDT IS NULL) THEN BUYPRICE
		ELSE 0
	END AS ID_BUYPRICE
	,CASE
		WHEN FLMEMBERID IS NOT NULL AND (FLREGISTDT < SRM_LEADOPENDT OR SRM_LEADOPENDT IS NULL) THEN SRM_UNIQUEGOODSID
		ELSE NULL
	END AS ID_FAVGOODSDETAILID
FROM (
	--OFFERごとの掲載商品とその配信ユーザが同商品を次に開封したタイミングを取得する
	SELECT
		SBM_SENDDT AS SRM_SENDDT
		,SBM_CAMPAIGNID AS SRM_CAMPAIGNID
		,SBM_CHANNELID AS SRM_CHANNELID
		,SBM_DEVICEID AS SRM_DEVICEID
		,SBM_MEMBERID AS SRM_MEMBERID
		,SBM_OPENDT AS SRM_OPENDT
		,SBM_CONTENTSID AS SRM_CONTENTSID
		,SBM_UNIQUEGOODSID AS SRM_UNIQUEGOODSID
		,SBM_AREATYPEID AS SRM_AREATYPEID
		,LEAD(SBM_OPENDT) OVER (PARTITION BY SBM_CAMPAIGNID, SBM_DEVICEID, SBM_MEMBERID, SBM_AREATYPEID, SBM_CONTENTSID ORDER BY SBM_OPENDT) AS SRM_LEADOPENDT
	FROM (
		SELECT DISTINCT
			MO_SENDDT AS SBM_SENDDT
			,MO_OFFERID AS SBM_OFFERID
			,MO_CAMPAIGNID AS SBM_CAMPAIGNID
			,MD_CHANNELID AS SBM_CHANNELID
			,MO_DEVICEID AS SBM_DEVICEID
			,MO_MEMBERID AS SBM_MEMBERID
			,MO_OPENDT AS SBM_OPENDT
			,CONTENTS_ID AS SBM_CONTENTSID--GOODSDETAILID
			,AREA_TYPE AS SBM_AREATYPEID
			,MO_OFFERID || CONTENTS_ID AS SBM_UNIQUEGOODSID
		FROM (
			SELECT
				DATE_TRUNC('DAY', OFFER_DELIVERY_DT) AS MO_SENDDT
				,OFFER_ID AS MO_OFFERID
				,CAMPAIGN_ID AS MO_CAMPAIGNID
				,CHANNEL AS MD_CHANNELID
				,OFFER_DEVICE AS MO_DEVICEID
				,MEMBER_ID AS MO_MEMBERID
				,OPEN_DT AS MO_OPENDT
			FROM
				TRTM_OFFER_DELIVERY_TMP
			WHERE
				CHANNEL = 1	--メール
				AND OFFER_ID IS NOT NULL--3.0の配信実績に限定
		) AS MAILOFFER /*PREFIX = MO*/
		LEFT OUTER JOIN TRTM_CONTENTS_DELIVERY ON MO_OFFERID = OFFER_ID AND DELETE_DT IS NULL AND CONTENTS_TYPE = 2
	) AS SENDBASEFORMAIL /*PREFIX = SBM*/
) AS SENDRESULTFORMAIL /*PREFIX = SRM*/
LEFT OUTER JOIN BUYDATA AS BUYITEMFORMAIL ON SRM_MEMBERID = ORMEMBERID
	AND SRM_CONTENTSID = GDGOODSDETAILID
	AND ORORDERDT > SRM_OPENDT
	AND ORORDERDT <= SRM_OPENDT + INTERVAL '1DAY'--開封から1日以内の購買対象
LEFT OUTER JOIN FAVDATA AS FAVDATAFORMAIL ON SRM_MEMBERID = FLMEMBERID
	AND SRM_CONTENTSID = FLGOODSDETAILID
	AND FLREGISTDT > SRM_OPENDT
	AND FLREGISTDT <= SRM_OPENDT + INTERVAL '1DAY'--開封から1日以内のお気に入り登録対象
	AND (FLDELETEDT IS NULL OR FLDELETEDT > SRM_OPENDT)
WHERE
	ID_OPENDT IS NOT NULL

UNION ALL

--LINE配信データ
SELECT
	SRL_SENDDT AS ID_SENDDT
	,SRL_CAMPAIGNID AS ID_CAMPAIGNID
	,SRL_CHANNELID AS ID_CHANNELID
	,SRL_DEVICEID AS ID_DEVICEID
	,NULL AS ID_OPENDT
	,SRL_UNIQUEGOODSID AS ID_UNIQUEGOODSID
	,NULL AS ID_AREATYPEID
	,HOUR_ORDER AS ID_HOUR_ORDER
	--配信日以降同商品が再度配信および開封されていた場合は次の開封日より前
	--購入金額については複数回購入すればすべて対象とするためSUMをとる
	,CASE
		WHEN ORMEMBERID IS NOT NULL AND (ORORDERDT < SRL_LEADDELIVERYDT OR SRL_LEADDELIVERYDT IS NULL) THEN SRL_UNIQUEGOODSID
		ELSE NULL
	END AS ID_BUYGOODSDETAILID	--購入商品
	,CASE
		WHEN ORMEMBERID IS NOT NULL AND (ORORDERDT < SRL_LEADDELIVERYDT OR SRL_LEADDELIVERYDT IS NULL) THEN BUYPRICE
		ELSE 0
	END AS ID_BUYPRICE	--購入金額
	,CASE
		WHEN FLMEMBERID IS NOT NULL AND (FLREGISTDT < SRL_LEADDELIVERYDT OR SRL_LEADDELIVERYDT IS NULL) THEN SRL_UNIQUEGOODSID
		ELSE NULL
	END AS ID_FAVGOODSDETAILID
FROM (
	--OFFERごとの掲載商品とその配信ユーザが同商品を次に開封したタイミングを取得する
	SELECT
		SBL_SENDDT AS SRL_SENDDT
		,SBL_CAMPAIGNID AS SRL_CAMPAIGNID
		,SBL_CHANNELID AS SRL_CHANNELID
		,SBL_DEVICEID AS SRL_DEVICEID
		,SBL_MEMBERID AS SRL_MEMBERID
		,SBL_OFFERDELIVERYDT AS SRL_OFFERDELIVERYDT
		,SBL_CONTENTSID AS SRL_CONTENTSID--GOODSDETAILID
		,SBL_UNIQUEGOODSID AS SRL_UNIQUEGOODSID
		,LEAD(SBL_OFFERDELIVERYDT) OVER (PARTITION BY SBL_CAMPAIGNID, SBL_DEVICEID, SBL_MEMBERID, SBL_CONTENTSID ORDER BY SBL_OFFERDELIVERYDT) AS SRL_LEADDELIVERYDT
	FROM (
		SELECT DISTINCT
			LO_SENDDT AS SBL_SENDDT
			,LO_OFFERID AS SBL_OFFERID
			,LO_CAMPAIGNID AS SBL_CAMPAIGNID
			,LO_CHANNELID AS SBL_CHANNELID
			,LO_DEVICEID AS SBL_DEVICEID
			,LO_MEMBERID AS SBL_MEMBERID
			,LO_OFFERDELIVERYDT AS SBL_OFFERDELIVERYDT
			,CONTENTS_ID AS SBL_CONTENTSID--GOODSDETAILID
			,LO_OFFERID || CONTENTS_ID AS SBL_UNIQUEGOODSID	--OFFERごとの配信商品をあらわすユニークID
		FROM (
			SELECT
				DATE_TRUNC('DAY', OFFER_DELIVERY_DT) AS LO_SENDDT
				,OFFER_ID AS LO_OFFERID
				,CAMPAIGN_ID AS LO_CAMPAIGNID
				,CHANNEL AS LO_CHANNELID
				,OFFER_DEVICE AS LO_DEVICEID
				,MEMBER_ID AS LO_MEMBERID
				,OFFER_DELIVERY_DT AS LO_OFFERDELIVERYDT
			FROM
				TRTM_OFFER_DELIVERY_TMP
			WHERE
				CHANNEL = 2	--LINEに限定
				AND OFFER_ID IS NOT NULL--3.0の配信実績に限定
		) AS LINEOFFER	/*PREFIX = LO*/
		LEFT OUTER JOIN TRTM_MAINCONTENTS_DELIVERY ON LO_OFFERID = OFFER_ID
	) AS SENDBASEFORLINE /*PREFIX = SBL*/
) AS SENDRESULTFORLINE /*PREFIX = SRL*/
LEFT OUTER JOIN BUYDATA ON SRL_MEMBERID = ORMEMBERID
	AND SRL_CONTENTSID = GDGOODSDETAILID
	AND ORORDERDT > SRL_OFFERDELIVERYDT
	AND ORORDERDT <= SRL_OFFERDELIVERYDT + INTERVAL '1DAY'--配信から1日以内の購買対象
LEFT OUTER JOIN FAVDATA AS FAVDATAFORLINE ON SRL_MEMBERID = FLMEMBERID
	AND SRL_CONTENTSID = FLGOODSDETAILID
	AND FLREGISTDT > SRL_OFFERDELIVERYDT
	AND FLREGISTDT <= SRL_OFFERDELIVERYDT + INTERVAL '1DAY'--配信から1日以内のお気に入り登録対象
	AND (FLDELETEDT IS NULL OR FLDELETEDT > SRL_OFFERDELIVERYDT)
;

--日ごとの配信通数、開封通数、流入通数、経由売上
CREATE TEMP TABLE SENDDATA AS
SELECT
	DD_SENDDT AS SD_SENDDT
	,DD_CAMPAIGNID AS SD_CAMPAIGNID
	,DD_CHANNELID AS SD_CHANNELID
	,DD_DEVICEID AS SD_DEVICEID
	,DD_CNT_SEND AS SD_CNT_SEND
	,DD_CNT_OPEN AS SD_CNT_OPEN
	,DD_CNT_CLICK AS SD_CNT_CLICK
	,VD_REVENUE_TOTAL AS SD_REVENUE_TOTAL
FROM (
	SELECT
		DATE_TRUNC('DAY', OFFER_DELIVERY_DT) AS DD_SENDDT
		,CAMPAIGN_ID AS DD_CAMPAIGNID
		,CHANNEL AS DD_CHANNELID
		,OFFER_DEVICE AS DD_DEVICEID
		,COUNT(DISTINCT NVL(OFFER_ID, EMAILID)) AS DD_CNT_SEND
		,COUNT(DISTINCT CASE WHEN OPEN_DT IS NOT NULL AND CHANNEL = 1 THEN NVL(OFFER_ID, EMAILID) ELSE NULL END) AS DD_CNT_OPEN
		,COUNT(DISTINCT CASE WHEN CLICK_DT IS NOT NULL THEN OFFER_ID ELSE NULL END) AS DD_CNT_CLICK
	FROM
		TRTM_OFFER_DELIVERY_TMP
	GROUP BY
		DD_SENDDT
		,DD_CAMPAIGNID
		,DD_CHANNELID
		,DD_DEVICEID
	) AS DELIVERYDATA/*PREFIX = DD*/
	LEFT OUTER JOIN (
		SELECT
			HVU_SENDDT AS VD_SENDDT
			,HVU_CAMPAIGNID AS VD_CAMPAIGNID
			,HVU_CHANNELID AS VD_CHANNELID
			,NVL(HVU_DEVICEID, 2) AS VD_DEVICEID--LINEのデバイスがNULLなのでPDにあわせて2とする
			,SUM(HVU_REVENUE) AS VD_REVENUE_TOTAL
		FROM
			TAT_DB_HISTORY_VISIT_USER
		WHERE
			HVU_SENDDT >= CURRENT_DATE + INTERVAL '-7DAYS'
			AND HVU_CHANNELID IN (1, 2)--メールおよびLINE
			AND HVU_CHANNEL_DETAILID = 4--パーソナライズ
		GROUP BY
			VD_SENDDT
			,VD_CAMPAIGNID
			,VD_CHANNELID
			,VD_DEVICEID
	) AS VISITDATA /*PREFIX = VD*/ ON DD_SENDDT = VD_SENDDT
							AND DD_CAMPAIGNID = VD_CAMPAIGNID
							AND DD_CHANNELID = VD_CHANNELID
							AND DD_DEVICEID = VD_DEVICEID
;

--日次実績更新
DELETE FROM TAT_DB_RESULT_PERSONALIZE
WHERE RPA_SENDDT >= CURRENT_DATE + INTERVAL '-7DAYS'
;

INSERT INTO TAT_DB_RESULT_PERSONALIZE
SELECT
	SD_SENDDT AS RPA_SENDDT
	,SD_CAMPAIGNID AS RPA_CAMPAIGNID
	,SD_CHANNELID AS RPA_CHANNELID
	,SD_DEVICEID AS RPA_DEVICEID
	,ID_AREATYPEID AS RPA_AREATYPEID
	,ID_CNT_SENDITEM AS RPA_CNT_SENDITEM
	,ID_CNT_BUY_SENDITEM AS RPA_CNT_BUY_SENDITEM
	,ID_REVENUE_BUY_SENDITEM AS RPA_REVENUE_BUY_SENDITEM
	,SD_CNT_SEND AS RPA_CNT_SEND
	,SD_CNT_OPEN AS RPA_CNT_OPEN
	,SD_CNT_CLICK AS RPA_CNT_CLICK
	,NVL(SD_REVENUE_TOTAL, 0) AS RPA_REVENUE_TOTAL
	,ID_CNT_FAVORITE_ITEM AS RPA_CNT_FAVORITE_ITEM
FROM
	SENDDATA
	LEFT OUTER JOIN (
		SELECT
			ID_SENDDT
			,ID_CAMPAIGNID
			,ID_CHANNELID
			,ID_DEVICEID
			,ID_AREATYPEID
			,COUNT(DISTINCT ID_UNIQUEGOODSID) AS ID_CNT_SENDITEM--表示商品数
			,COUNT(DISTINCT ID_BUYGOODSDETAILID) AS ID_CNT_BUY_SENDITEM--購買商品数（1つの配信商品に対しそれが買われたかどうかの数を数えるのでDISTINCTをとる）
			,SUM(ID_BUYPRICE) AS ID_REVENUE_BUY_SENDITEM--購買金額（金額は実績として複数購買の場合も全部対象とするのですべてSUMする）
			,COUNT(DISTINCT ID_FAVGOODSDETAILID) AS ID_CNT_FAVORITE_ITEM--お気に入り登録商品数
		FROM
			ITEMDATA
		GROUP BY
			ID_SENDDT
			,ID_CAMPAIGNID
			,ID_CHANNELID
			,ID_DEVICEID
			,ID_AREATYPEID
	) AS ITEM ON ID_SENDDT = SD_SENDDT
					AND ID_CAMPAIGNID = SD_CAMPAIGNID
					AND ID_CHANNELID = SD_CHANNELID
					AND ID_DEVICEID = SD_DEVICEID
;

--時間帯別実績更新
CREATE TEMP TABLE TAT_DB_MASTER_DELIVERY_HOUR_TMP AS
SELECT
	CAMPAIGN_ID
	,CHANNEL
	,OFFER_DEVICE
	,MDH_HOUR
FROM (
	SELECT DISTINCT
		CAMPAIGN_ID
		,CHANNEL
		,OFFER_DEVICE
	FROM
		TRTM_OFFER_DELIVERY_TMP
) AS CAMPAIGN
CROSS JOIN TAT_DB_MASTER_DELIVERY_HOUR
;

CREATE TEMP TABLE DELIVERY_HOURLY AS
SELECT
	MASTER.CAMPAIGN_ID
	,MASTER.CHANNEL
	,MASTER.OFFER_DEVICE
	,MDH_HOUR
	,NVL(CNT_DELIVERY,0) AS CNT_DELIVERY
FROM
	TAT_DB_MASTER_DELIVERY_HOUR_TMP AS MASTER
	LEFT OUTER JOIN (
		SELECT
			CAMPAIGN_ID
			,CHANNEL
			,OFFER_DEVICE
			,DATE_PART('HOUR', OFFER_DELIVERY_DT) AS HOUR_DELIVERY
			,COUNT(DISTINCT NVL(OFFER_ID, EMAILID)) AS CNT_DELIVERY
		FROM
			TRTM_OFFER_DELIVERY_TMP
		GROUP BY
			CAMPAIGN_ID
			,CHANNEL
			,OFFER_DEVICE
			,HOUR_DELIVERY
	) AS DELIVERYDATA ON MASTER.CAMPAIGN_ID = DELIVERYDATA.CAMPAIGN_ID
											AND MASTER.CHANNEL = DELIVERYDATA.CHANNEL
											AND MASTER.OFFER_DEVICE = DELIVERYDATA.OFFER_DEVICE
											AND MDH_HOUR = HOUR_DELIVERY
;

CREATE TEMP TABLE OPEN_HOURLY AS
SELECT
	MASTER.CAMPAIGN_ID
	,MASTER.CHANNEL
	,MASTER.OFFER_DEVICE
	,MDH_HOUR
	,NVL(CNT_OPEN,0) AS CNT_OPEN
FROM
	TAT_DB_MASTER_DELIVERY_HOUR_TMP AS MASTER
	LEFT OUTER JOIN (
		SELECT
			CAMPAIGN_ID
			,CHANNEL
			,OFFER_DEVICE
			,DATE_PART('HOUR', OPEN_DT) AS HOUR_OPEN
			,COUNT(DISTINCT CASE WHEN OPEN_DT IS NOT NULL AND CHANNEL = 1 THEN NVL(OFFER_ID, EMAILID) ELSE NULL END) AS CNT_OPEN
		FROM
			TRTM_OFFER_DELIVERY_TMP
		GROUP BY
			CAMPAIGN_ID
			,CHANNEL
			,OFFER_DEVICE
			,HOUR_OPEN
	) AS OPENDATA ON MASTER.CAMPAIGN_ID = OPENDATA.CAMPAIGN_ID
											AND MASTER.CHANNEL = OPENDATA.CHANNEL
											AND MASTER.OFFER_DEVICE = OPENDATA.OFFER_DEVICE
											AND MDH_HOUR = HOUR_OPEN
;

CREATE TEMP TABLE CLICK_HOURLY AS
SELECT
	MASTER.CAMPAIGN_ID
	,MASTER.CHANNEL
	,MASTER.OFFER_DEVICE
	,MDH_HOUR
	,NVL(CNT_CLICK,0) AS CNT_CLICK
FROM
	TAT_DB_MASTER_DELIVERY_HOUR_TMP AS MASTER
	LEFT OUTER JOIN (
		SELECT
			CAMPAIGN_ID
			,CHANNEL
			,OFFER_DEVICE
			,DATE_PART('HOUR', CLICK_DT) AS HOUR_CLICK
			,COUNT(DISTINCT CASE WHEN CLICK_DT IS NOT NULL THEN OFFER_ID ELSE NULL END) AS CNT_CLICK
		FROM
			TRTM_OFFER_DELIVERY_TMP
		GROUP BY
			CAMPAIGN_ID
			,CHANNEL
			,OFFER_DEVICE
			,HOUR_CLICK
	) AS CLICKDATA ON MASTER.CAMPAIGN_ID = CLICKDATA.CAMPAIGN_ID
											AND MASTER.CHANNEL = CLICKDATA.CHANNEL
											AND MASTER.OFFER_DEVICE = CLICKDATA.OFFER_DEVICE
											AND MDH_HOUR = HOUR_CLICK
;

CREATE TEMP TABLE BUYITEM_HOURLY AS
SELECT
	MASTER.CAMPAIGN_ID
	,MASTER.CHANNEL
	,MASTER.OFFER_DEVICE
	,MDH_HOUR
	,NVL(CNT_BUYITEM,0) AS CNT_BUYITEM
FROM
	TAT_DB_MASTER_DELIVERY_HOUR_TMP AS MASTER
	LEFT OUTER JOIN (
	SELECT
		ID_CAMPAIGNID
		,ID_CHANNELID
		,ID_DEVICEID
		,ID_HOUR_ORDER
		,COUNT(DISTINCT ID_BUYGOODSDETAILID) AS CNT_BUYITEM
	FROM
		ITEMDATA
	GROUP BY
		ID_CAMPAIGNID
		,ID_CHANNELID
		,ID_DEVICEID
		,ID_HOUR_ORDER
	) AS BUYITEMDATA ON MASTER.CAMPAIGN_ID = ID_CAMPAIGNID
											AND MASTER.CHANNEL = ID_CHANNELID
											AND MASTER.OFFER_DEVICE = ID_DEVICEID
											AND MDH_HOUR = ID_DEVICEID
;

TRUNCATE TAT_DB_RESULT_HOURLY
;

INSERT INTO TAT_DB_RESULT_HOURLY
SELECT
	DELIVERY_HOURLY.MDH_HOUR AS RHO_HOUR
	,DELIVERY_HOURLY.CHANNEL AS RHO_CHANNELID
	,(SELECT MCD_CHANNEL_DETAILID FROM TAT_DB_MASTER_CHANNEL_DETAIL WHERE MCD_CHANNEL_DETAILNAME = 'パーソナライズ') AS RHO_CHANNEL_DETAILID
	,DELIVERY_HOURLY.CAMPAIGN_ID AS RHO_CAMPAIGNID
	,DELIVERY_HOURLY.OFFER_DEVICE AS RHO_DEVICEID
	,NULL AS RHO_OSID
	,CNT_DELIVERY AS RHO_CNT_SEND
	,CNT_OPEN AS RHO_CNT_OPEN
	,CNT_CLICK AS RHO_CNT_CLICK
	,CNT_BUYITEM AS RHO_CNT_BUYITEM
FROM
	DELIVERY_HOURLY
    INNER JOIN OPEN_HOURLY ON DELIVERY_HOURLY.MDH_HOUR = OPEN_HOURLY.MDH_HOUR
									AND DELIVERY_HOURLY.CHANNEL = OPEN_HOURLY.CHANNEL
									AND DELIVERY_HOURLY.CAMPAIGN_ID = OPEN_HOURLY.CAMPAIGN_ID
									AND DELIVERY_HOURLY.OFFER_DEVICE = OPEN_HOURLY.OFFER_DEVICE
	INNER JOIN CLICK_HOURLY ON DELIVERY_HOURLY.MDH_HOUR = CLICK_HOURLY.MDH_HOUR
									AND DELIVERY_HOURLY.CHANNEL = CLICK_HOURLY.CHANNEL
									AND DELIVERY_HOURLY.CAMPAIGN_ID = CLICK_HOURLY.CAMPAIGN_ID
									AND DELIVERY_HOURLY.OFFER_DEVICE = CLICK_HOURLY.OFFER_DEVICE
	INNER JOIN	BUYITEM_HOURLY ON DELIVERY_HOURLY.MDH_HOUR = BUYITEM_HOURLY.MDH_HOUR
									AND DELIVERY_HOURLY.CHANNEL = BUYITEM_HOURLY.CHANNEL
									AND DELIVERY_HOURLY.CAMPAIGN_ID = BUYITEM_HOURLY.CAMPAIGN_ID
									AND DELIVERY_HOURLY.OFFER_DEVICE = BUYITEM_HOURLY.OFFER_DEVICE
;

COMMIT
;